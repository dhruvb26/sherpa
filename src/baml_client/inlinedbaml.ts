/*************************************************************************************************

Welcome to Baml! To use this generated code, please run one of the following:

$ npm install @boundaryml/baml
$ yarn add @boundaryml/baml
$ pnpm add @boundaryml/baml

*************************************************************************************************/

// This file was generated by BAML: do not edit it. Instead, edit the BAML
// files and re-generate this code.
//
/* eslint-disable */
// tslint:disable
// @ts-nocheck
// biome-ignore format: autogenerated code
const fileMap = {
  
  "clients.baml": "// Learn more about clients at https://docs.boundaryml.com/docs/snippets/clients/overview\n\nclient<llm> CustomGPT4o {\n  provider openai\n  options {\n    model \"gpt-4o\"\n    max_tokens 16384\n    api_key env.OPENAI_API_KEY\n  }\n}\n\nclient<llm> CustomGPT4oMini {\n  provider openai\n  retry_policy Exponential\n  options {\n    model \"gpt-4o-mini\"\n    api_key env.OPENAI_API_KEY\n  }\n}\n\nclient<llm> CustomSonnet {\n  provider anthropic\n  options {\n    model \"claude-3-5-sonnet-20241022\"\n    api_key env.ANTHROPIC_API_KEY\n  }\n}\n\n\nclient<llm> CustomHaiku {\n  provider anthropic\n  retry_policy Constant\n  options {\n    model \"claude-3-haiku-20240307\"\n    api_key env.ANTHROPIC_API_KEY\n  }\n}\n\n// https://docs.boundaryml.com/docs/snippets/clients/round-robin\nclient<llm> CustomFast {\n  provider round-robin\n  options {\n    // This will alternate between the two clients\n    strategy [CustomGPT4oMini, CustomHaiku]\n  }\n}\n\n// https://docs.boundaryml.com/docs/snippets/clients/fallback\nclient<llm> OpenaiFallback {\n  provider fallback\n  options {\n    // This will try the clients in order until one succeeds\n    strategy [CustomGPT4oMini, CustomGPT4oMini]\n  }\n}\n\n// https://docs.boundaryml.com/docs/snippets/clients/retry\nretry_policy Constant {\n  max_retries 3\n  // Strategy is optional\n  strategy {\n    type constant_delay\n    delay_ms 200\n  }\n}\n\nretry_policy Exponential {\n  max_retries 2\n  // Strategy is optional\n  strategy {\n    type exponential_backoff\n    delay_ms 300\n    mutliplier 1.5\n    max_delay_ms 10000\n  }\n}",
  "generators.baml": "// This helps use auto generate libraries you can use in the language of\n// your choice. You can have multiple generators if you use multiple languages.\n// Just ensure that the output_dir is different for each generator.\ngenerator target {\n    // Valid values: \"python/pydantic\", \"typescript\", \"ruby/sorbet\", \"rest/openapi\"\n    output_type \"typescript\"\n\n    // Where the generated code will be saved (relative to baml_src/)\n    output_dir \"../\"\n\n    // The version of the BAML package you have installed (e.g. same version as your baml-py or @boundaryml/baml).\n    // The BAML VSCode extension version should also match this version.\n    version \"0.65.0\"\n\n    // Valid values: \"sync\", \"async\"\n    // This controls what `b.FunctionName()` will be (sync or async).\n    default_client_mode async\n}\n",
  "response.baml": "class Vehilce {\n    id string\n    role string\n}\n\nclass Message {\n    vehicle Vehilce\n    message string\n}\n\n\nfunction ExtractConversation(conversation: string) -> Message {\n    client \"openai/gpt-4o\"\n    prompt #\"\n        Extract the conversation from the following string:\n        {{ conversation }}\n    \"#\n}\n\ntest extract_conversation {\n    functions [ExtractConversation]\n    args {\n        conversation #\"Greetings, fellow vehicles. I'm considering our current positions and speeds. We have several buses, trucks, and cars. Let's discuss our roles to optimize the traffic flow.\\\"\\n    },\\n    {\\n        \\\"CAV_02\\\": \\\"I propose that I take on the role of a leader due to my higher speed of 30. My position is at {latitude: 30.2680, longitude: -97.7435}, and I believe I can set a steady pace for the others.\\\"\\n    },\\n    {\\n        \\\"CAV_03\\\": \\\"I agree with CAV_02. As a car with a speed of 20, I can be a follower. I'll maintain a safe distance behind CAV_02 to ensure smooth traffic flow.\\\"\\n    },\\n    {\\n        \\\"CAV_04\\\": \\\"Considering my speed of 25 and my position at {latitude: 30.2695, longitude: -97.7443}, I can act as a wingman to CAV_02, supporting the leader and helping manage the flow from the side.\\\"\\n    },\\n    {\\n        \\\"CAV_05\\\": \\\"With my truck's speed at 30, I can be another leader for the vehicles behind me. My position is further along at {latitude: 30.2702, longitude: -97.7447}, and I'll coordinate with CAV_02.\\\"\\n    },\\n    {\\n        \\\"CAV_06\\\": \\\"As a car with a speed of 20, I'll take the follower role as well. I'll stay behind CAV_05 to ensure a steady pace is maintained.\\\"\\n    },\\n    {\\n        \\\"CAV_07\\\": \\\"My position is {latitude: 30.2716, longitude: -97.7455}. With a speed of 25, I'll be a wingman for CAV_05, assisting in maintaining lane discipline.\\\"\\n    },\\n    {\\n        \\\"CAV_08\\\": \\\"Being a truck with a speed of 30, I'll act as a leader for the rear vehicles. My position at {latitude: 30.2723, longitude: -97.7459} will help manage the traffic flow from behind.\\\"\\n    },\\n    {\\n        \\\"CAV_09\\\": \\\"I'll join CAV_06 as a follower. My speed is 20, and I'll maintain a safe distance behind CAV_08 to support our coordinated flow.\\\"\\n    },\\n    {\\n        \\\"CAV_10\\\": \\\"Lastly, as a bus with a speed of 25, I'll be a wingman for CAV_08, helping to optimize the traffic flow on the outer lanes.\\\"\\n    },\\n    {\\n        \\\"CAV_01\\\": \\\"Fantastic, everyone. With our roles defined, let's implement our plan. Leaders will set the pace, followers will maintain safe distances, and wingmen will assist in lane management. This should optimize our average velocity and minimize stoppages.\"#\n    }\n}",
  "resume.baml": "// Defining a data model.\nclass Resume {\n  name string\n  email string\n  experience string[]\n  skills string[]\n}\n\n// Create a function to extract the resume from a string.\nfunction ExtractResume(resume: string) -> Resume {\n  // Specify a client as provider/model-name\n  // you can use custom LLM params with a custom client name from clients.baml like \"client CustomHaiku\"\n  client \"openai/gpt-4o\" // Set OPENAI_API_KEY to use this client.\n  prompt #\"\n    Extract from this content:\n    {{ resume }}\n\n    {{ ctx.output_format }}\n  \"#\n}\n\n// Test the function with a sample resume. Open the VSCode playground to run this.\ntest vaibhav_resume {\n  functions [ExtractResume]\n  args {\n    resume #\"\n      Vaibhav Gupta\n      vbv@boundaryml.com\n\n      Experience:\n      - Founder at BoundaryML\n      - CV Engineer at Google\n      - CV Engineer at Microsoft\n\n      Skills:\n      - Rust\n      - C++\n    \"#\n  }\n}\n",
  "vehicle.baml": "class Vehicle {\n    id string\n    type string\n    currentSpeed int\n    coordinates float[]\n    mass int\n    frontalArea float\n    enginePower int\n    drivelineEfficiency float\n    currentPhase string\n    timeUntilNextPhase int\n    cycleTime int\n    speedLimit float\n    grade float\n    upstreamDistance int\n    downstreamDistance int\n    airDensity float\n    gravitationalAcceleration float\n    a0 float\n    a1 float\n    a2 float\n}\n\n\nfunction ExtractVehicleData(vehicleData: string) -> Vehicle[] {\n    client \"CustomGPT4o\"\n    prompt #\"\n        Extract each vehicle's data from the following data table, look at the column headers to understand the data:\n        {{ vehicleData }}\n    \"#\n}\n\ntest extract_vehicle_data {\n    functions [ExtractVehicleData]\n    args {\n        vehicleData #\"\n            |ID       |Type |Current Speed|Location                                    |Mass|Frontal Area|Engine Power|Driveline Efficiency|Current Phase|Time Until Next Phase|Cycle Time|Speed Limit|Grade|Upstream Distance|Downstream Distance|Air Density|Gravitational Acceleration|a0  |a1  |a2  |\n|---------|-----|-------------|--------------------------------------------|----|------------|------------|--------------------|-------------|---------------------|----------|-----------|-----|-----------------|-------------------|-----------|--------------------------|----|----|----|\n|vehicle2 |bus  |25           |{\"latitude\": 30.2672, \"longitude\": -97.7431}|2500|3.5         |250000      |0.8                 |red          |20                   |60        |15.56      |0.05 |300              |300                |1.226      |9.806                     |0.12|0.22|0.32|\n|vehicle3 |truck|30           |{\"latitude\": 30.2680, \"longitude\": -97.7435}|4000|5.0         |400000      |0.7                 |red          |25                   |70        |18.23      |0.08 |400              |400                |1.227      |9.807                     |0.14|0.24|0.34|\n|vehicle4 |car  |20           |{\"latitude\": 30.2688, \"longitude\": -97.7439}|2000|2.8         |200000      |0.9                 |red          |20                   |60        |13.89      |0.03 |200              |200                |1.225      |9.806                     |0.1 |0.2 |0.3 |\n|vehicle5 |bus  |25           |{\"latitude\": 30.2695, \"longitude\": -97.7443}|3000|4.2         |300000      |0.8                 |red          |25                   |70        |16.67      |0.06 |350              |350                |1.226      |9.807                     |0.13|0.23|0.33|\n|vehicle6 |truck|30           |{\"latitude\": 30.2702, \"longitude\": -97.7447}|5000|6.0         |500000      |0.7                 |red          |30                   |80        |20.0       |0.1  |500              |500                |1.227      |9.808                     |0.15|0.25|0.35|\n|vehicle7 |car  |20           |{\"latitude\": 30.2709, \"longitude\": -97.7451}|2500|3.0         |250000      |0.9                 |red          |20                   |60        |14.44      |0.04 |250              |250                |1.225      |9.806                     |0.11|0.21|0.31|\n|vehicle8 |bus  |25           |{\"latitude\": 30.2716, \"longitude\": -97.7455}|3500|4.5         |350000      |0.8                 |red          |25                   |70        |17.14      |0.07 |400              |400                |1.226      |9.807                     |0.14|0.24|0.34|\n|vehicle9 |truck|30           |{\"latitude\": 30.2723, \"longitude\": -97.7459}|6000|7.0         |600000      |0.7                 |red          |30                   |90        |21.87      |0.12 |600              |600                |1.227      |9.808                     |0.16|0.26|0.36|\n|vehicle10|car  |20           |{\"latitude\": 30.2730, \"longitude\": -97.7463}|3000|3.5         |300000      |0.9                 |red          |20                   |60        |15.56      |0.05 |300              |300                |1.225      |9.806                     |0.12|0.22|0.32|\n|vehicle11|bus  |25           |{\"latitude\": 30.2737, \"longitude\": -97.7467}|4500|5.0         |450000      |0.8                 |red          |25                   |70        |18.23      |0.08 |450              |450                |1.226      |9.807                     |0.15|0.25|0.35|\n\n        \"#\n    }\n}",
}
export const getBamlFiles = () => {
    return fileMap;
}